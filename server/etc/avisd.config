# Avis.Config-Version=2

##
# Avis router configuration.
#
# This file contains configuration settings for the Avis event
# router. Uncomment and modify settings as required.
#
# For numeric values, the suffixes "K" and "M" may be used to indicate
# units of 1 kilobyte == 1024 == 2^10 bytes, and 1 megabyte ==
# 1,048,576 == or 2^20 bytes. e.g. 4K == 4096 bytes
#
# For boolean (true/false) values, "1", "true" or "yes" may be used
# for true, "0", "false" or "no" may be used for false.
##

######################################################################
# Router options
######################################################################

##
# The default port to run Avis service on. This may be overridden by
# an explicit port setting in the "Listen" URI's below.

# Port=2917

##
# Specifies the network addresses for the Avis router to listen on for
# client connections. This option contains one or more
# whitespace-separated Elvin URI's specifying a network address and a
# protocol.
#
# Using the wildcard address "0.0.0.0" binds to all IPv4 and IPv6
# addresses. Using "!" as a prefix in the host name selects all
# addresses on a network interface rather than associated with a host
# name or IP (e.g. "elvin://!eth0:1234").
#
# Examples:
#   Listen=elvin://hostname:1234
#   Listen=elvin:/tcp,none,xdr/!eth0:1234
#   Listen=elvin:/tcp,none,xdr/hostname:1234 \
#          elvin:/secure/171.4.87.72:4567
#
# Default: Listen=elvin://0.0.0.0

# Listen=elvin://0.0.0.0

######################################################################
# Secure client connections (SSL/TLS)
######################################################################

##
# To set up secure connections using SSL/TLS, define one or more
# secure URI's in the Listen setting, for example
# elvin:/secure/0.0.0.0:29170. You must create your own private key:
# see the TLS.Keystore option for more info.
##

##
# A space-separated list of host names and/or IP addresses that must
# be positively authenticated before they can connect. You can use
# Unix-style wildcards ("*" and "?") in the host names, or simply "*"
# to require authentication for all hosts. Since the only supported
# authentication mechanism is TLS, clients in this list must connect
# and successfully authenticate using TLS before being able to
# establish a link.
#
# See also: Federation.Require-Authenticated

# Default: nothing

# Require-Authenticated=*.somewhere.org host.elsewhere.com
# Require-Authenticated=*

##
# The filename or URI for a keystore containing keys and certificates
# used to secure a connection, and trusted certificates used to
# authenticate clients. If not an absolute path, this path is resolved
# relative to this configuration file.
#
# Default: No keystore. You need to generate a private key inside a
# keystore before you use TLS using the keytool command that comes
# with the JDK: see the instructions at
# http://avis.sourceforge.net/tls.html for details.
#
#    keytool -genkey -alias my-router-key -keysize 512 \
#       -validity 3650 -keyalg RSA \
#       -dname "CN=My Name, \
#         OU=my.organisation.unit, \
#         O=My Organisation, L=My Location, \
#         S=My State, C=My Country Code" \
#       -keypass mypassword -storepass mypassword \
#       -keystore avis-router.keystore
#

# TLS.Keystore=avis-router.keystore

##
# Pass phrase for verifying/securing the router's keystore.
#
# Default: no passphrase

# TLS.Keystore-Passphrase=my-passphrase

######################################################################
# Federation
######################################################################

##
# A federation class is a named type of federation link, with
# associated incoming (Federation.Subscribe) and outgoing
# (Federation.Provide) notification filters: if either of these is
# unspecified, they default to FALSE, i.e. allow nothing. You may wish
# to set up different federation classes for different partners to
# control what goes in and out of the router.
#
# The options that apply to federation classes use the notation:
#
#   <Option>[<Federation-Class>] = <Value>
#
# These apply <Option> and <Value> to <Federation-Class> rather than
# as a general option.
##

##
# Set to yes to activate federation.
#
# Default: no

# Federation.Activated: yes

##
# The globally-unique name for this router (in the federation
# specification this name is termed the router's "server
# domain"). This should usually be left as the default value, since
# mistakenly using the same federation router name in more than one
# federator can cause hard-to-diagnose federation failures.
#
# Default: <Instance-Id>@<Host-Name>

# Federation.Router-Name = your-router-hostname.com

##
# Set the subscription expression that is used to subscribe to
# notifications from the remote router. As well as a normal
# subscription expression, this can be "FALSE" to subscribe to
# nothing.
#
# Default: FALSE

# Federation.Subscribe[Public] = FALSE
# Federation.Subscribe[Internal] = require (Message)

##
# Set the subscription expression that is used to filter outgoing
# notifications. This expression can be used to restrict what a remote
# router can subscribe to. As well as a normal subscription
# expression, this can be "FALSE" to provide nothing, or "TRUE" to
# provide anything the remote router subscribes to.
#
# Default: FALSE

# Federation.Provide[Public] = require (Message) && \
#                              Distribution == "world"
# Federation.Provide[Internal] = TRUE

##
# Instructs the router to initiate a connection to a remote federation
# endpoint. The given federation class controls what can be sent and
# received by the connection.

# Federation.Connect[Public] = ewaf://public.elvin.org
# Federation.Connect[Internal] = ewaf://internal-host1:29160 \
#                                ewaf://internal-host2:29160

##
# The addresses and protocols to listen to for incoming federation
# connections. The "ewaf" URI's used in this field have the same
# semantics as the "elvin" URI's in the Listen field.
#
# Default: ewaf://0.0.0.0:2916

# Federation.Listen = ewaf://0.0.0.0:2916 ewaf:/secure/0.0.0.0:29160

##
# The Federation.Apply-Class setting maps incoming connections to a
# federation class that controls what can be sent and received by the
# connection.
#
# The right hand side is a set of space-separated host names or IP
# addresses. An entry may refers to an IP address ("121.185.2.6") or a
# host name. Unix-style wildcards can also be used.
#
# If a federator tries to connect to this router and there is no
# mapping to a federation class for it, the class named in
# Federation.Default-Class will be applied. If there is no default
# class, it will be refused connection.

# Federation.Apply-Class[Public] = host.partner.com *.elvin.org
# Federation.Apply-Class[Internal] = 121.217.1??.*

##
# The default federation class to be applied for hosts if there is no
# mapping applied to them by one of the Federation.Apply-Class
# options.
#
# Default: none (hosts with no mapping are denied connection)

# Federation.Default-Class = Public

##
# This option is the same as the Require-Authenticated option, but
# applies to federation links. Hosts in this list must connect via TLS
# and successfully authenticate before being able to establish a link.
# 
# Default: no authentication

# Federation.Require-Authenticated = host.somewhere.org

##
# Add attributes to incoming or outgoing notifications. The given
# attributes are added to notifications for the specified federation
# class. The name of the attribute is the second parameter after the
# federation class. Values can be of type:
#
#  String:  "public" 'a string'
#  Int32:   12
#  Int64:   42L
#  Real64:  3.14
#  Opaque:  [de ad be ef]

# Federation.Add-Incoming-Attribute[Public][From-Public] = 1
# Federation.Add-Outgoing-Attribute[Internal][Distribution] = "internal"

##
# Amount of time that must pass before the router assumes that the
# remote federator is not responding to a request.
#
# Default: 20 seconds

# Federation.Request-Timeout = 20

##
# Amount of idle time between messages that must pass before the
# federation link sends a test message to confirm the connection is
# live.
#
# Default: 60 seconds

# Federation.Keepalive-Interval = 60

###################################################################### 
# Avis I/O parameters
######################################################################

##
# Enable use of direct (system level) buffering for network I/O rather
# than creating buffers in the JVM heap. Direct buffers can be
# significantly faster, but are more limited in size. Use the
# MaxDirectMemorySize option on the JVM command line if you see
# "java.lang.OutOfMemoryError: Direct buffer memory" errors under load
# (e.g. -XX:MaxDirectMemorySize=128M).
#
# Default: true

# IO.Use-Direct-Buffers=true

##
# The maximum amount of time allowed to a client between connecting to
# the server and either sending a connection request or a unconnected
# notify (UNotify). If no message is seen within this window, the
# client will be disconnected.
#
# Default: 15 seconds

# IO.Idle-Connection-Timeout=15

######################################################################
# Default client connection options
######################################################################

##
# These are the server's default settings for client
# connections. Clients may negotiate different values on connection.
##

##
# Avis-specific connection options
##

##
# Max number of connection keys per connection.
#
# Default: 1K Range: 0 - 1K

# Connection.Max-Keys=1K

##
# Max number of keys for a subscription.
#
# Default: 256 Range: 0 - 1K

# Subscription.Max-Keys=256

##
# Standard options (required in all router implementations)
##

##
# Max packet length acceptable from a client. This is the maximum size
# message the router will accept, which effectively means the largest
# notification size allowed.
#
# Default: 2M Range: 1K - 10M

# Packet.Max-Length=2M

##
# Maximum number of subscriptions allowed by a single client. 
#
# Default: 2K Range: 16 - 2K

# Subscription.Max-Count=2K

##
# Maximum length, in bytes, of any subscription expression.
#
# Default: 2K Range: 1K - 4K

# Subscription.Max-Length=2K

##
# The maximum size of the router's per-client incoming packet queue,
# in bytes. If the queue exceeds this size, the router will throttle
# the data stream from the client until the queue drops below this
# value. NOTE: Avis does not currently implement packet dropping as
# specified by Receive-Queue.Drop-Policy, so this throttling behaviour
# differs slightly from the Elvin specification in that packets will
# be throttled rather than dropped.
#
# Default: 1M Range: 1K - 1MB

# Receive-Queue.Max-Length=1M

##
# Set whether the TCP NO_DELAY flag is enabled for sockets on the
# server side. 1 = send immediately (TCP NO_DELAY = true), 0 = do not
# necessarily send immediately, buffer data for optimal throughput
# (TCP NO_DELAY = false). You can set this to 1 if you experience lag
# with "real time" applications that require minimal delivery latency,
# but note that this may result in an overall reduction in
# throughput.
#
# It is usually a better idea for the client to negotiate this value
# as needed rather than hard code it on the router.
#
# Default: 0 Range: 0 - 1

# TCP.Send-Immediately=0

####### Options below are not implemented yet #######

# Currently a number of connection options are not implemented by
# Avis. You can set them, but they will not be enforced by the
# router. The pseudo-value "MAX" used below means bounded only by
# whatever the system can handle in terms of memory and other
# resources.

# The maximum number of attributes on a notification.
#
# Range: 16-MAX 

# Attribute.Max-Count=MAX

# Maximum length, in bytes, of an attribute name.
#
# Range: 64-MAX

# Attribute.Name.Max-Length=MAX

# Maximum length, in bytes, for opaque values.
#
# Range: 1024-MAX

# Attribute.Opaque.Max-Length=MAX

# Maximum length, in bytes, for opaque values.  Note that this value
# is not the number of characters: some characters may take up to 5
# bytes to represent in UTF-8 encoding.
#
# Range: 1024-MAX

# Attribute.String.Max-Length=MAX

# This property describes the desired behaviour of the router's packet
# receive queue if it exceeds the negotitated maximum size.
#
# Values: "oldest", "newest", "largest", "fail"

# Receive-Queue.Drop-Policy="oldest"

# This property describes the desired behaviour of the router's packet
# send queue if it exceeds the negotitated maximum size.
#
# Values: "oldest", "newest", "largest", "fail"

# Send-Queue.Drop-Policy=oldest

# The maximum length (in bytes) of the routers send queue.
#
# Range: 1024-MAX

# Send-Queue.Max-Length=MAX
